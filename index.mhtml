<%shared># <!-- -*- html -*- -->
my $h2 = 1;  #Inicialización del contador
my $ej = 1;  #Contador de ejercicios
my $h1 = "G1";  #Número de este tema 
</%shared>
<& header.mhtml, titulo_tema => 'Mini-Introducción a Git',
      keywords => 'Computación distribuida, computación paralela, git,
  control de versiones',
      description => "Mini-tutorial de Git",
      h1 => $h1 &>

<&| filter.mhtml &>

<div class='objetivos'> 
	<ul>
	  <li>Usar un repositorio Git para control de versiones</li>
	</ul>
      </div>  

<div class='nav'><ul>
	  <li> <A href='/~jmerelo/tutoriales/'><em>Otros tutoriales</em></A></li>
	</ul>
      </div>
      
<& h2.mhtml, h1 => $h1, h2 => \$h2, titulo => 'Introducción', abbrev => 'intro' &>

<p><a href='http://git.or.cz/'>Git</a> es un sistema rápido de control
    de versiones escrito en <a href='http://perl.com'>Perl</a>, y que
    se ha hecho popular sobre todo a raíz de ser el elegido para el
    kernel de Linux.</p>

<p>git supone una partida total de los conceptos tradicionales de
    otros sistemas de control de versiones tales como CVS o
    Subversion. En realidad, se organiza como un sistema de ficheros
    distribuido, que puede tener o no un repositorio central. Por eso,
    está optimizado sobre todo para grandes árboles de directorios,
    siendo capaz de reconocer dónde se encuentra en ese árbol y sin
    tener problemas a la hora de mover directorios, ficheros o lo que
    sea</p>

<p>En fin, que <a
      href='http://en.wikipedia.org/wiki/Git_(software)'>git</a> se
      está convirtiendo hoy en día en uno de los sistemas de control
      de código más populares. Y no tiene mucho material para
      aprender, así que merece la pena dedicarle unos minutos a
      aprender a manejarlo.</p>

<& h2.mhtml, h1 => $h1, h2 => \$h2, titulo => 'Primeros pasos', abbrev
  => 'pp' &>

<p>Supongamos que ya tenemos un repositorio git creado en algún
    sitio; habitualmente un sitio remoto. Lo primero que hay que hacer
    es instalarse el susodicho git; lo que puedes hacer bajándotelo de
    <a href='http://git.or.cz/'>su sitio web</a> o de tus repositorios
    preferidos. Únicamente tienes que tener cuidado de buscar el
    paquete <code>git-core</code>, porque <code>git</code> a secas son
    las GNU Interactive Tools.</p>

<p>Una vez hecho esto, tendremos que hacer un <em>checkout</em>. El
    equivalente a esto en <em>git-speak</em> es <em>clone</em>. Vamos
    a usar el repositorio público de proyectos <a
    href='http://github.com'>para este tutorial</a>, que además, está
    alojado ahí mismo. Si queremos bajárnoslo:</p>
<code class='ejemplo'>bash$ git clone git://github.com/JJ/tutorial.git</code>
<p>donde tenéis es el git propiamente dicho, el comando clone, y el
    <em>git url</em>, que contiene el "sitio" en el que está
    almacenado el tutorial. Esa orden te creará un directorio llamado
    <code>tutorial</code>, donde meterá los poquillos ficheros que
    hay. </p>

<p>A partir de ahí, funciona poco más o menos igual que los
    demás. Para añadir un fichero al repositorio, tal como uno llamado
    <code>ejemplo.1</code>:</p>
<code class='ejemplo'>git add ejemplo.1</code>
<p>Git no contesta nada, se queda calladito. En realidad, lo que hace
    esta orden es simplemente decirle a git que debe prestarle
    atención también a este fichero. Si ahora escribimos</p>
<code class='ejemplo'>git status</code>
<p>nos dirá algo así</p>
<code class='ejemplo'># On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file>..." to unstage)
#
#       new file:   ejemplo.1
#</code>
<p>pero hasta que no se haga un <code>commit </code>, no se modificará
    el repositorio local, es decir, no se hará el cambio
    definitivo. Vamos a ello:</p>
<code class='ejemplo'>git commit -m "Fichero ejemplo añadido"</code>
<p>lo que dará una contestación similar a esta:</p>
<code class='ejemplo'>-bash-3.2$ git commit -m "Fichero ejemplo añadido"
Created commit 3c3d643: Fichero ejemplo añadido
 1 files changed, 1 insertions(+), 0 deletions(-)
 create mode 100644 ejemplo.1
  </code>
<p>Pero todavía no se ha propagado ese cambio a todos los
    repositorios. A diferencia de los otros sistemas, donde el commit
    es ya definitivo, git sirve para desarrollar de forma distribuida,
    así que commit sólo hace un cambio en la versión local del
    repositorio. Para enviarlo al repositorio global, y que los demás
    se lo puedan bajar, se usa <code>push</code></p>
<code class='ejemplo'>git push git@github.com:JJ/tutorial.git</code>
<p>Si os dais cuenta, el URL que hemos usado es diferente; mientras
    que antes habíamos usado un URL genérico, que no permite cambiar
    lo que hay, habrá que usar este de aquí para subir los cambios;
    para lo que tendremos que tener permiso, claro.</p>

<p>Si no tenemos permiso para modificar, siempre nos queda el consuelo
    de actualizar lo que otros hayan cambiado. Y si subir los cambios
    de llama <code>pull</code>, ¿cómo será para bajárselo?</p>
<code class='ejemplo'>> git pull</code>
<p>que responderá algo así por este estilo</p>
<code class='ejemplo'>remote: Generating pack...
remote: Done counting 5 objects.
remote: Result has 3 objects.
remote: Deltifying 3 objects...
remote:  100% (3/3) done
remote: Total 3 (delta 1), reused 0 (delta 0)
Unpacking 3 objects...
 100% (3/3) done
* refs/remotes/origin/master: fast forward to branch 'master' of git://github.com/JJ/tutorial
  old..new: 608f3d3..e3eb172
Merge made by recursive.
 index.mhtml |  187 ++++++++++++++++++++++++++---------------------------------
 1 files changed, 82 insertions(+), 105 deletions(-)</code>
<p>lo que, por cierto, se hace bastante rápido. Git tiene en cuenta
    cuáles son los cambios por fichero, y en este momento, si hay
    algún cambio local que entre en conflicto con la actualización,
    también lo diría.</p>

<p>Con esto más o menos se puede manejar con git:
    clone-add-commit-pull-push y listo</p>


<& h2.mhtml, h1 => $h1, h2 => \$h2, titulo => 'Creando repositorios',
  abbrev => 'creacion' &>

<p>Tampoco es que sea demasiado complicado lo de crear un repositorio,
    y es equivalente a como se hace con otros sistemas. Siplemente
    <code>git init</code> seguido por lo que se ha comentado
    anteriormente: add (si es necesario), commit y push. En <a
    href='http://crysol.inf-cr.uclm.es/node/797'>este tutorial explica
    también como hacer un puñaillo de cosas más, como añadir varias
    personas al desarrollo. La idea es que no es necesario un
    repositorio central: dos personas pueden ir fusionando sus
    repositorios, sin necesidad de recurrir a uno central.</a>

<& h2.mhtml, h1 => $h1, h2 => \$h2, titulo => 'Leer más',
  abbrev => 'mas' &>

<p>Un <a href='http://git.or.cz/course/svn.html'>tutorial de git</a>
      en el mismo sitio donde se desarrolla git, <a
      href='http://www.kernel.org/pub/software/scm/git/docs/cvs-migration.html'>git
      para usuarios de cvs</a>, y <a
      href='http://www.kernel.org/pub/software/scm/git/docs/tutorial.html'>una
      escueta introducción con unos 20 comandos</a>. Git tiene varias
      decenas de comandos, e incluso un interfaz gráfico (o a través
      de web), así que por un lado no resulta difícil de usar, pero
      resulta un poco más complicado de dominar.</p>

<& footer.mhtml &>

</&>
